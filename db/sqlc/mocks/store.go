// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	db "gopsql/banking/db/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) CreateAccount(ctx context.Context, arg db.CreateAccountParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) (db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateAccountParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Store_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateAccountParams
func (_e *Store_Expecter) CreateAccount(ctx interface{}, arg interface{}) *Store_CreateAccount_Call {
	return &Store_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, arg)}
}

func (_c *Store_CreateAccount_Call) Run(run func(ctx context.Context, arg db.CreateAccountParams)) *Store_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateAccountParams))
	})
	return _c
}

func (_c *Store_CreateAccount_Call) Return(_a0 db.Account, _a1 error) *Store_CreateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateAccount_Call) RunAndReturn(run func(context.Context, db.CreateAccountParams) (db.Account, error)) *Store_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEntry provides a mock function with given fields: ctx, arg
func (_m *Store) CreateEntry(ctx context.Context, arg db.CreateEntryParams) (db.Entry, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntry")
	}

	var r0 db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) (db.Entry, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateEntryParams) db.Entry); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateEntryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEntry'
type Store_CreateEntry_Call struct {
	*mock.Call
}

// CreateEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateEntryParams
func (_e *Store_Expecter) CreateEntry(ctx interface{}, arg interface{}) *Store_CreateEntry_Call {
	return &Store_CreateEntry_Call{Call: _e.mock.On("CreateEntry", ctx, arg)}
}

func (_c *Store_CreateEntry_Call) Run(run func(ctx context.Context, arg db.CreateEntryParams)) *Store_CreateEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateEntryParams))
	})
	return _c
}

func (_c *Store_CreateEntry_Call) Return(_a0 db.Entry, _a1 error) *Store_CreateEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateEntry_Call) RunAndReturn(run func(context.Context, db.CreateEntryParams) (db.Entry, error)) *Store_CreateEntry_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransfer provides a mock function with given fields: ctx, arg
func (_m *Store) CreateTransfer(ctx context.Context, arg db.CreateTransferParams) (db.Transfer, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransfer")
	}

	var r0 db.Transfer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) (db.Transfer, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateTransferParams) db.Transfer); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Transfer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateTransferParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateTransfer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransfer'
type Store_CreateTransfer_Call struct {
	*mock.Call
}

// CreateTransfer is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateTransferParams
func (_e *Store_Expecter) CreateTransfer(ctx interface{}, arg interface{}) *Store_CreateTransfer_Call {
	return &Store_CreateTransfer_Call{Call: _e.mock.On("CreateTransfer", ctx, arg)}
}

func (_c *Store_CreateTransfer_Call) Run(run func(ctx context.Context, arg db.CreateTransferParams)) *Store_CreateTransfer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateTransferParams))
	})
	return _c
}

func (_c *Store_CreateTransfer_Call) Return(_a0 db.Transfer, _a1 error) *Store_CreateTransfer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateTransfer_Call) RunAndReturn(run func(context.Context, db.CreateTransferParams) (db.Transfer, error)) *Store_CreateTransfer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, arg
func (_m *Store) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.User, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) (db.User, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateUserParams) db.User); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateUserParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Store_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateUserParams
func (_e *Store_Expecter) CreateUser(ctx interface{}, arg interface{}) *Store_CreateUser_Call {
	return &Store_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *Store_CreateUser_Call) Run(run func(ctx context.Context, arg db.CreateUserParams)) *Store_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateUserParams))
	})
	return _c
}

func (_c *Store_CreateUser_Call) Return(_a0 db.User, _a1 error) *Store_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateUser_Call) RunAndReturn(run func(context.Context, db.CreateUserParams) (db.User, error)) *Store_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccound provides a mock function with given fields: ctx, id
func (_m *Store) DeleteAccound(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccound")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_DeleteAccound_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccound'
type Store_DeleteAccound_Call struct {
	*mock.Call
}

// DeleteAccound is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Store_Expecter) DeleteAccound(ctx interface{}, id interface{}) *Store_DeleteAccound_Call {
	return &Store_DeleteAccound_Call{Call: _e.mock.On("DeleteAccound", ctx, id)}
}

func (_c *Store_DeleteAccound_Call) Run(run func(ctx context.Context, id int64)) *Store_DeleteAccound_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_DeleteAccound_Call) Return(_a0 error) *Store_DeleteAccound_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DeleteAccound_Call) RunAndReturn(run func(context.Context, int64) error) *Store_DeleteAccound_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Store) GetAccount(ctx context.Context, id int64) (db.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Store_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Store_Expecter) GetAccount(ctx interface{}, id interface{}) *Store_GetAccount_Call {
	return &Store_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, id)}
}

func (_c *Store_GetAccount_Call) Run(run func(ctx context.Context, id int64)) *Store_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetAccount_Call) Return(_a0 db.Account, _a1 error) *Store_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetAccount_Call) RunAndReturn(run func(context.Context, int64) (db.Account, error)) *Store_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function with given fields: ctx, id
func (_m *Store) GetEntry(ctx context.Context, id int64) (db.Entry, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 db.Entry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (db.Entry, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) db.Entry); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(db.Entry)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type Store_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Store_Expecter) GetEntry(ctx interface{}, id interface{}) *Store_GetEntry_Call {
	return &Store_GetEntry_Call{Call: _e.mock.On("GetEntry", ctx, id)}
}

func (_c *Store_GetEntry_Call) Run(run func(ctx context.Context, id int64)) *Store_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Store_GetEntry_Call) Return(_a0 db.Entry, _a1 error) *Store_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetEntry_Call) RunAndReturn(run func(context.Context, int64) (db.Entry, error)) *Store_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueries provides a mock function with given fields:
func (_m *Store) GetQueries() db.Querier {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQueries")
	}

	var r0 db.Querier
	if rf, ok := ret.Get(0).(func() db.Querier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Querier)
		}
	}

	return r0
}

// Store_GetQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueries'
type Store_GetQueries_Call struct {
	*mock.Call
}

// GetQueries is a helper method to define mock.On call
func (_e *Store_Expecter) GetQueries() *Store_GetQueries_Call {
	return &Store_GetQueries_Call{Call: _e.mock.On("GetQueries")}
}

func (_c *Store_GetQueries_Call) Run(run func()) *Store_GetQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_GetQueries_Call) Return(_a0 db.Querier) *Store_GetQueries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_GetQueries_Call) RunAndReturn(run func() db.Querier) *Store_GetQueries_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, username
func (_m *Store) GetUser(ctx context.Context, username string) (db.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(db.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type Store_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Store_Expecter) GetUser(ctx interface{}, username interface{}) *Store_GetUser_Call {
	return &Store_GetUser_Call{Call: _e.mock.On("GetUser", ctx, username)}
}

func (_c *Store_GetUser_Call) Run(run func(ctx context.Context, username string)) *Store_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetUser_Call) Return(_a0 db.User, _a1 error) *Store_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetUser_Call) RunAndReturn(run func(context.Context, string) (db.User, error)) *Store_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccounts provides a mock function with given fields: ctx, arg
func (_m *Store) ListAccounts(ctx context.Context, arg db.ListAccountsParams) ([]db.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAccountsParams) ([]db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.ListAccountsParams) []db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.ListAccountsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_ListAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccounts'
type Store_ListAccounts_Call struct {
	*mock.Call
}

// ListAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.ListAccountsParams
func (_e *Store_Expecter) ListAccounts(ctx interface{}, arg interface{}) *Store_ListAccounts_Call {
	return &Store_ListAccounts_Call{Call: _e.mock.On("ListAccounts", ctx, arg)}
}

func (_c *Store_ListAccounts_Call) Run(run func(ctx context.Context, arg db.ListAccountsParams)) *Store_ListAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.ListAccountsParams))
	})
	return _c
}

func (_c *Store_ListAccounts_Call) Return(_a0 []db.Account, _a1 error) *Store_ListAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_ListAccounts_Call) RunAndReturn(run func(context.Context, db.ListAccountsParams) ([]db.Account, error)) *Store_ListAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// TransferTx provides a mock function with given fields: ctx, arg
func (_m *Store) TransferTx(ctx context.Context, arg db.TransferTxParams) (*db.TransferTxResult, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for TransferTx")
	}

	var r0 *db.TransferTxResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.TransferTxParams) (*db.TransferTxResult, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.TransferTxParams) *db.TransferTxResult); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.TransferTxResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.TransferTxParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_TransferTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferTx'
type Store_TransferTx_Call struct {
	*mock.Call
}

// TransferTx is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.TransferTxParams
func (_e *Store_Expecter) TransferTx(ctx interface{}, arg interface{}) *Store_TransferTx_Call {
	return &Store_TransferTx_Call{Call: _e.mock.On("TransferTx", ctx, arg)}
}

func (_c *Store_TransferTx_Call) Run(run func(ctx context.Context, arg db.TransferTxParams)) *Store_TransferTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.TransferTxParams))
	})
	return _c
}

func (_c *Store_TransferTx_Call) Return(_a0 *db.TransferTxResult, _a1 error) *Store_TransferTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_TransferTx_Call) RunAndReturn(run func(context.Context, db.TransferTxParams) (*db.TransferTxResult, error)) *Store_TransferTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateAccount(ctx context.Context, arg db.UpdateAccountParams) (db.Account, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 db.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) (db.Account, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountParams) db.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type Store_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateAccountParams
func (_e *Store_Expecter) UpdateAccount(ctx interface{}, arg interface{}) *Store_UpdateAccount_Call {
	return &Store_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", ctx, arg)}
}

func (_c *Store_UpdateAccount_Call) Run(run func(ctx context.Context, arg db.UpdateAccountParams)) *Store_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAccountParams))
	})
	return _c
}

func (_c *Store_UpdateAccount_Call) Return(_a0 db.Account, _a1 error) *Store_UpdateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateAccount_Call) RunAndReturn(run func(context.Context, db.UpdateAccountParams) (db.Account, error)) *Store_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccountsBalance provides a mock function with given fields: ctx, arg
func (_m *Store) UpdateAccountsBalance(ctx context.Context, arg db.UpdateAccountsBalanceParams) ([]db.UpdateAccountsBalanceRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountsBalance")
	}

	var r0 []db.UpdateAccountsBalanceRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountsBalanceParams) ([]db.UpdateAccountsBalanceRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateAccountsBalanceParams) []db.UpdateAccountsBalanceRow); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UpdateAccountsBalanceRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateAccountsBalanceParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_UpdateAccountsBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccountsBalance'
type Store_UpdateAccountsBalance_Call struct {
	*mock.Call
}

// UpdateAccountsBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateAccountsBalanceParams
func (_e *Store_Expecter) UpdateAccountsBalance(ctx interface{}, arg interface{}) *Store_UpdateAccountsBalance_Call {
	return &Store_UpdateAccountsBalance_Call{Call: _e.mock.On("UpdateAccountsBalance", ctx, arg)}
}

func (_c *Store_UpdateAccountsBalance_Call) Run(run func(ctx context.Context, arg db.UpdateAccountsBalanceParams)) *Store_UpdateAccountsBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateAccountsBalanceParams))
	})
	return _c
}

func (_c *Store_UpdateAccountsBalance_Call) Return(_a0 []db.UpdateAccountsBalanceRow, _a1 error) *Store_UpdateAccountsBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_UpdateAccountsBalance_Call) RunAndReturn(run func(context.Context, db.UpdateAccountsBalanceParams) ([]db.UpdateAccountsBalanceRow, error)) *Store_UpdateAccountsBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
